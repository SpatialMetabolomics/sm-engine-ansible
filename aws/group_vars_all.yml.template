---

stage: STAGE_NAME  # prod/stage/dev

# SOFTWARE CONFIGURATION

time_zone_name: UTC

aws_access_key_id: AWS_ACCESS_KEY_ID
aws_secret_access_key: AWS_SECRET_ACCESS_KEY
aws_key_name: AWS_KEY_NAME
aws_region: eu-west-1

notification_email: SM-ADMIN@EXAMPLE.COM

postgres_version: 9.5
postgres_port: 5432
postgres_drop_create: false

elasticsearch_version: 5.5.2

kibana_version: "{{ elasticsearch_version }}"
kibana_user: kibana
kibana_password: KIBANA_PASSWORD
kibana_es_port: 9200  # kibana runs on the same host and connects to ES directly

rabbitmq_version: 3.6.8-1
rabbitmq_host: "{{ hostvars['web-1'].ansible_ec2_local_ipv4 }}"
rabbitmq_user: sm
rabbitmq_password: RABBITMQ_PASSWORD

miniconda_version: latest
miniconda_python: 3
miniconda_prefix: /opt/dev/miniconda3
miniconda_env:
  name: sm
  dependencies:
    - python=3.6
    - numpy=1.11.2
    - scipy=0.18.1
    - matplotlib=2
    - pandas=0.19.1
    - cffi
    - libgcc
    - psycopg2=2.7.1
    - pip:
      - requests
      - py4j
      - pytest
      - recommonmark
      - boto3
      - fabric3
      - pypng
      - pyyaml
      - elasticsearch
      - elasticsearch_dsl
      - pika>=0.11.0b1
      - bottle
      - pysparkling

sm_repo_url: https://github.com/METASPACE2020/sm-engine
sm_branch: rel-v0.8
sm_postgres_host: "{{ hostvars['web-1'].ansible_ec2_local_ipv4 }}"
sm_postgres_password: POSTGRES_PASSWORD
sm_home: /opt/dev/sm
sm_s3_path: ENGINE_BUCKET_NAME  # bucket for sm engine tmp data in "s3a://bucket-name/data" form
sm_img_service_url: "http://{{ hostvars['web-1'].ansible_ec2_local_ipv4 }}:4201"
sm_es_host: "{{ hostvars['web-1'].ansible_ec2_local_ipv4 }}"
sm_es_port: 9210  # cannot be 9200 (nginx proxied)
sm_es_user: elastic
sm_es_password: ELASTIC_PASSWORD
sm_send_email: true
sm_create_schema: false
sm_create_es_index: false

sm_cluster_autostart_python: "{{ miniconda_prefix }}/envs/{{ miniconda_env.name }}/bin/python"

mol_db_repo_url: https://github.com/METASPACE2020/sm-molecular-db.git
mol_db_branch: rel-v0.8
mol_db_home: /opt/dev/sm-mol-db
mol_db_url: "http://{{ hostvars['web-1'].ansible_ec2_local_ipv4 }}/mol_db/v1"
mol_db_postgres_pass: POSTGRES_PASSWORD
mol_db_image_dir: /var/www/mol-images
mol_db_import_databases: false
mol_db_import_mol_images: false
mol_db_image_archives:
  - https://s3-eu-west-1.amazonaws.com/sm-mol-db/mol-images/mol-images-hmdb.tar.xz
  - https://s3-eu-west-1.amazonaws.com/sm-mol-db/mol-images/mol-images-chebi.tar.xz
  - https://s3-eu-west-1.amazonaws.com/sm-mol-db/mol-images/mol-images-lipid-maps.tar.xz
  - https://s3-eu-west-1.amazonaws.com/sm-mol-db/mol-images/mol-images-swiss-lipids.tar.xz
mol_db_imports:
  - url: https://s3-eu-west-1.amazonaws.com/sm-mol-db/db_files/hmdb_2016_v2.csv
    name: HMDB
    version: 2016
  - url: https://s3-eu-west-1.amazonaws.com/sm-mol-db/db_files/chebi_2016_v2.csv
    name: ChEBI
    version: 2016
  - url: https://s3-eu-west-1.amazonaws.com/sm-mol-db/db_files/lipid_maps_2016.csv
    name: LIPID_MAPS
    version: 2016
  - url: https://s3-eu-west-1.amazonaws.com/sm-mol-db/db_files/swiss_lipids_2016.csv
    name: SwissLipids
    version: 2016

nodejs_version: 8.*

sm_graphql_hostname: "{{ hostvars['web-1'].ansible_ssh_host }}"  # specify manually for production
sm_graphql_repo_url: https://github.com/METASPACE2020/sm-graphql.git
sm_graphql_branch: rel-v0.8
sm_graphql_home: /opt/dev/sm-graphql
sm_graphql_slack_webhook_url: ""
sm_graphql_slack_channel: ""
sm_graphql_jwt_secret: JWT_SECRET
sm_graphql_public_url: "http://{{ sm_graphql_hostname }}/graphql"
sm_graphql_mol_image_host: "{{ hostvars['web-1'].ansible_ssh_host }}"
sm_graphql_img_upload_host: "{{ hostvars['web-1'].ansible_ssh_host }}"
sm_graphql_moldb_service_host: "{{ hostvars['web-1'].ansible_ec2_local_ipv4 }}/mol_db"
sm_graphql_database_password: "{{ sm_postgres_password }}"
sm_graphql_rabbitmq_host: "{{ rabbitmq_host }}"
sm_graphql_rabbitmq_user: "{{ rabbitmq_user }}"
sm_graphql_rabbitmq_password: "{{ rabbitmq_password }}"
sm_graphql_ws_public_endpoint: "ws://{{ sm_graphql_hostname }}/ws"
sm_graphql_default_adducts:
  "+": ["+H", "+Na", "+K"]
  "-": ["-H", "+Cl"]

sm_webapp_hostname: "{{ hostvars['web-1'].ansible_ssh_host }}"  # specify manually for production
sm_webapp_repo_url: https://github.com/METASPACE2020/sm-webapp.git
sm_webapp_branch: rel-v0.8
sm_webapp_hostname: "{{ hostvars['web-1'].ansible_ssh_host }}"
sm_webapp_url: "http://{{ sm_webapp_hostname }}"
sm_webapp_home: /opt/dev/sm-web-app
sm_webapp_port: 8082
sm_webapp_cookie_secret:
sm_webapp_admin_emails: [admin@mail.de]
# The region should satisfy the following requirements:
#  - AWS SES endpoints are available there
#  - AWS authentication protocol V2 is supported
sm_webapp_aws_region: "eu-west-1"
sm_webapp_aws_access_key_id:
sm_webapp_aws_secret_access_key:
sm_webapp_s3_bucket: BUCKET-NAME-UPLOAD  # just plain bucket name
sm_webapp_google_client_id: ""
sm_webapp_google_client_secret: ""
sm_webapp_google_callback_url: "http://{{ sm_webapp_hostname }}/auth/google/callback"
sm_webapp_graphql_url: /graphql
sm_webapp_upload_destination: s3
sm_webapp_graphql_ws_public_endpoint: "{{ sm_graphql_ws_public_endpoint }}"
sm_webapp_jwt_secret: "{{ sm_graphql_jwt_secret }}"
sm_webapp_redis_host: localhost
sm_webapp_redis_port: 6379
sm_webapp_enable_uploads: true

sm_ansible_url: https://github.com/METASPACE2020/sm-engine-ansible.git
sm_ansible_branch: rel-v0.8
sm_ansible_home: /opt/dev/sm-engine-ansible

sm_activate_venv: source {{ miniconda_prefix }}/bin/activate {{ miniconda_env.name }}

spark_key_file: ~/.ssh/ubuntu_spark
spark_version: "2.1.1-bin-hadoop2.7"
spark_mirror: "https://s3-eu-west-1.amazonaws.com/sm-engine/dev"
spark_home: "/usr/lib/spark"
spark_user: "ubuntu"
spark_master_filebeat:
  version: "{{ elk_version }}"
  es_host: "{{ elk_private_ip }}"
  es_user: elastic
  es_password: CopySourceIfNoneMatch16
  prospectors:
    - input_type: log
      paths: ["{{ sm_home }}/logs/sm-engine.log"]
      multiline: {pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}", negate: "true", match: after}
    - input_type: log
      paths: ["{{ sm_home }}/logs/sm-daemon.log"]
      multiline: {pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}", negate: "true", match: after}
  ingest_node_pipeline_id: sm_engine_log_extract
  ingest_node_pipeline:
    description: "Ingest node description for the log messages dispatched by filebeat"
    processors:
      - grok:
          field: "message"
          patterns:
            - "%{TIMESTAMP_ISO8601:timestamp} - %{LOGLEVEL:level} - %{NOTSPACE:component} - %{NOTSPACE:file_line} -%{GREEDYDATA:msg}"
          ignore_missing: true
      - date:
          field: "timestamp"
          timezone: "{{ time_zone_name }}"
          formats:
            - "yyyy-MM-dd HH:mm:ss,SSS"

elk_version: 5.5.2
elk_private_ip:
elk_basic_auth_users:
  - user: elastic
    password:
  - user: kibana
    password:

spark_env_extras_slave:
  SPARK_WORKER_DIR: "/tmp/spark"
  SPARK_LOCAL_DIRS: "/tmp/spark"
  PYSPARK_PYTHON: "{{ miniconda_prefix }}/envs/{{ miniconda_env.name }}/bin/python"

spark_env_extras_master:
  AWS_ACCESS_KEY_ID: "{{ aws_access_key_id }}"
  AWS_SECRET_ACCESS_KEY: "{{ aws_secret_access_key }}"
  PYSPARK_PYTHON: "{{ miniconda_prefix }}/envs/{{ miniconda_env.name }}/bin/python"

slack_channel:
slack_webhook_url:

nginx_upstream_hosts:
  - name: web_server
    server: 127.0.0.1:{{ sm_webapp_port }}
  - name: mol_image_server
    server: 127.0.0.1:3020
  - name: isotope_image_server
    server: 127.0.0.1:4201
  - name: graphql_server
    server: 127.0.0.1:3010
  - name: graphql_ws_server
    server: 127.0.0.1:5666
  - name: moldb_server
    server: 127.0.0.1:5001
  - name: kibana_server
    server: 127.0.0.1:5601
  - name: elasticsearch_server
    server: 127.0.0.1:9200

nginx_servers:
  - desc: Kibana redirect
    params:
      - listen 8080;
    locations:
      - path: /
        params:
          - auth_basic "Private Property";
          - auth_basic_user_file /etc/nginx/passwdfile;
          - proxy_pass http://kibana_server;
          - include proxy-params.conf;

  - desc: Endpoint for Web App, GraphQL, GraphQL WebSocket, ion images, mol images, and MolDB
    params:
      - server_name {{ sm_webapp_hostname }};
      - listen 80;
      - proxy_read_timeout 300;
      - send_timeout 300;
    locations:
      - path: /mol-images/
        params:
          - root /var/www;
      - path: /
        params:
          - proxy_pass http://web_server;
          - client_max_body_size 5M;
      - path: /fs/iso_images/
        params:
          - proxy_pass http://isotope_image_server/fs/iso_images/;
          - limit_except GET {deny all;}
      - path: /db/iso_images/
        params:
          - proxy_pass http://isotope_image_server/db/iso_images/;
          - limit_except GET {deny all;}
      - path: /fs/optical_images/
        params:
          - proxy_pass http://isotope_image_server/fs/optical_images/;
          - limit_except GET {deny all;}
      - path: /fs/raw_optical_images/
        params:
          - proxy_pass http://isotope_image_server/fs/raw_optical_images/;
          - client_max_body_size 25M;
      - path: /graphql
        params:
          - proxy_pass http://graphql_server/graphql;
          - include proxy-params.conf;
      - path: /graphiql
        params:
          - proxy_pass http://graphql_server/graphiql;
          - include proxy-params.conf;
      - path: /ws
        params:
          - proxy_pass http://graphql_ws_server/graphql;
          - proxy_http_version 1.1;
          - proxy_set_header Upgrade $http_upgrade;
          - proxy_set_header Connection "upgrade";
          - include proxy-params.conf;
      - path: /mol_db/
        params:
          - proxy_pass http://moldb_server/;
          - include proxy-params.conf;

  - desc: Elasticsearch redirect
    params:
      - listen {{ sm_es_port }};
    locations:
      - path: /
        params:
        - auth_basic "Private Property";
        - auth_basic_user_file /etc/nginx/passwdfile;
        - proxy_pass http://elasticsearch_server;
        - include proxy-params.conf;

basic_auth_users:
  - user: "{{ sm_es_user }}"
    password: "{{ sm_es_password }}"
  - user: "{{ kibana_user }}"
    password: "{{ kibana_password }}"

# VIRTUAL MACHINES CONFIGURATION
# no ansible vars are allowed below, used by python scripts

cluster_configuration:
  instances:
    web:
      hostgroup: WEB_HOSTGROUP
      type: r4.large
      n: 1
      elipalloc: ELIPALLOC
      price:
      sec_group: WEB_SEC_GROUP_NAME
      image: ami-07174474  # public ubuntu 16.04

      block_dev_maps:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 200
            DeleteOnTermination: True
            VolumeType: gp2

    master:
      hostgroup: MASTER_HOSTGROUP
      type: c4.xlarge
      n: 1
      elipalloc:
      price: 0.6
      sec_group: default
      image: ami-07174474  # public ubuntu 16.04

      block_dev_maps:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 500
            DeleteOnTermination: True
            VolumeType: gp2

    slave:
      hostgroup: SLAVE_HOSTGROUP
      type: c4.2xlarge
      n: 1
      elipalloc:
      price: 0.6
      sec_group: default
      image: ami-07174474  # public ubuntu 16.04

      block_dev_maps:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 1000
            DeleteOnTermination: True
            VolumeType: gp2

    elk:
      hostgroup: elk
      sec_group: elk
