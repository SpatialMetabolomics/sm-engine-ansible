---

# SOFTWARE CONFIGURATION

time_zone_name: UTC

aws_access_key_id:
aws_secret_access_key:
aws_key_name:
aws_region:

notification_email: SM-ADMIN@EXAMPLE.COM

postgres_version: 9.5
postgres_port: 5432
postgres_drop_create: true  # if true will drop current Postgres cluster and create a new one

elasticsearch_version: 5.5.2

kibana_version: "{{ elasticsearch_version }}"
kibana_user: kibana
kibana_password: password
kibana_es_port: 9200  # kibana runs on the same host and connects to ES directly

rabbitmq_version: 3.6.8-1
rabbitmq_host: "{{ hostvars['web-1'].ansible_ssh_host }}"
rabbitmq_user: sm
rabbitmq_password: password

miniconda_version: latest
miniconda_python: 3
miniconda_prefix: /opt/dev/miniconda3
miniconda_env:
  name: sm
  dependencies:
    - python=3.6
    - numpy=1.11.2
    - scipy=0.18.1
    - matplotlib=2
    - pandas=0.19.1
    - cffi
    - libgcc
    - psycopg2=2.7.1
    - pip:
      - requests
      - py4j
      - pytest
      - recommonmark
      - boto3
      - fabric3
      - pypng
      - pyyaml
      - elasticsearch
      - elasticsearch_dsl
      - pika>=0.11.0b1
      - bottle
      - pysparkling

web_host_internal_address: "{{ hostvars['web-1'].ansible_ssh_host }}"
web_host_external_address: "localhost:8999"  # mapping of internal 80 port

sm_repo_url: https://github.com/METASPACE2020/sm-engine
sm_branch: rel-v0.7
sm_postgres_host: "{{ hostvars['web-1'].ansible_ssh_host }}"
sm_postgres_password: password
sm_home: /opt/dev/sm
sm_s3_path: ""
sm_img_service_url: "http://{{ web_host_internal_address }}:4201"  # used in the engine for adding/deleting iso images, direct port access is needed
sm_es_host: "{{ hostvars['web-1'].ansible_ssh_host }}"
sm_es_port: 9210  # cannot be 9200 (nginx proxied)
sm_es_user: elastic
sm_es_password: elastic
sm_send_email: false
sm_create_schema: true  # if true will destruct main database 'sm'
sm_create_es_index: true  # if true Elasticsearch index will be dropped and recreated

sm_cluster_autostart_python: "{{ miniconda_prefix }}/envs/{{ miniconda_env.name }}/bin/python"

mol_db_repo_url: https://github.com/METASPACE2020/sm-molecular-db.git
mol_db_branch: rel-v0.7
mol_db_home: /opt/dev/sm-mol-db
mol_db_url: "http://{{ web_host_internal_address }}/mol_db/v1"
mol_db_postgres_pass: password
mol_db_image_dir: /var/www/mol-images
mol_db_import_databases: true  # if true will drop all molecular databases and re-import them
mol_db_import_mol_images: true
mol_db_image_archives:
  - https://s3-eu-west-1.amazonaws.com/sm-mol-db/mol-images/mol-images-hmdb.tar.xz
mol_db_imports:
  - url: https://s3-eu-west-1.amazonaws.com/sm-mol-db/db_files/hmdb_2016_v2.csv
    name: HMDB
    version: 2016

sm_graphql_repo_url: https://github.com/METASPACE2020/sm-graphql.git
sm_graphql_branch: rel-v0.7
sm_graphql_home: /opt/dev/sm-graphql
sm_graphql_slack_webhook_url:
sm_graphql_slack_channel:
sm_graphql_jwt_secret: secret
sm_graphql_public_url: "http://{{ web_host_external_address }}/graphql"
sm_graphql_img_upload_host: "{{ web_host_external_address }}"
sm_graphql_moldb_service_host: "{{ web_host_internal_address }}/mol_db"
sm_graphql_database_password: "{{ sm_postgres_password }}"
sm_graphql_rabbitmq_host: "{{ rabbitmq_host }}"
sm_graphql_rabbitmq_user: "{{ rabbitmq_user }}"
sm_graphql_rabbitmq_password: "{{ rabbitmq_password }}"
sm_graphql_ws_public_endpoint: "ws://{{ web_host_external_address }}/ws"
sm_graphql_default_adducts:
  "+": ["+H", "+Na", "+K"]
  "-": ["-H", "+Cl"]

sm_webapp_repo_url: https://github.com/METASPACE2020/sm-webapp.git
sm_webapp_branch: rel-v0.7
sm_webapp_hostname: "{{ web_host_external_address }}"
sm_webapp_url: "http://{{ sm_webapp_hostname }}"
sm_webapp_home: /opt/dev/sm-web-app
sm_webapp_port: 8082
sm_webapp_cookie_secret: secret
sm_webapp_admin_emails:
sm_webapp_aws_region: "{{ aws_region }}"
sm_webapp_aws_access_key_id:
sm_webapp_aws_secret_access_key:
sm_webapp_s3_bucket:
sm_webapp_google_client_id:
sm_webapp_google_client_secret:
sm_webapp_google_callback_url: "http://{{ sm_webapp_hostname }}/auth/google/callback"
sm_webapp_graphql_url: /graphql
sm_webapp_upload_destination: /opt/sm-data/uploads
sm_webapp_graphql_ws_public_endpoint: "{{ sm_graphql_ws_public_endpoint }}"
sm_webapp_jwt_secret: "{{ sm_graphql_jwt_secret }}"
sm_webapp_redis_host: localhost
sm_webapp_redis_port: 6379
sm_webapp_enable_uploads: true

sm_ansible_url: https://github.com/METASPACE2020/sm-engine-ansible.git
sm_ansible_branch: rel-v0.7
sm_ansible_home: /opt/dev/sm-engine-ansible

sm_activate_venv: source {{ miniconda_prefix }}/bin/activate {{ miniconda_env.name }}

spark_key_file: ~/.ssh/ubuntu_spark
spark_version: "2.1.1-bin-hadoop2.7"
spark_mirror: "https://s3-eu-west-1.amazonaws.com/sm-engine/dev"
spark_home: /usr/lib/spark
spark_user: ubuntu

spark_env_extras_slave:
  SPARK_WORKER_DIR: "/tmp/spark"
  SPARK_LOCAL_DIRS: "/tmp/spark"
  PYSPARK_PYTHON: "{{ miniconda_prefix }}/envs/{{ miniconda_env.name }}/bin/python"

spark_env_extras_master:
  AWS_ACCESS_KEY_ID: "{{ aws_access_key_id }}"
  AWS_SECRET_ACCESS_KEY: "{{ aws_secret_access_key }}"
  PYSPARK_PYTHON: "{{ miniconda_prefix }}/envs/{{ miniconda_env.name }}/bin/python"

slack_channel:
slack_webhook_url:

nginx_upstream_hosts:
  - name: web_server
    server: 127.0.0.1:{{ sm_webapp_port }}
  - name: mol_image_server
    server: 127.0.0.1:3020
  - name: isotope_image_server
    server: 127.0.0.1:4201
  - name: graphql_server
    server: 127.0.0.1:3010
  - name: graphql_ws_server
    server: 127.0.0.1:5666
  - name: moldb_server
    server: 127.0.0.1:5001
  - name: kibana_server
    server: 127.0.0.1:5601
  - name: elasticsearch_server
    server: 127.0.0.1:9200

nginx_servers:
  - desc: Kibana redirect
    params:
      - listen 8080;
    locations:
      - path: /
        params:
          - auth_basic "Private Property";
          - auth_basic_user_file /etc/nginx/passwdfile;
          - proxy_pass http://kibana_server;
          - include proxy-params.conf;

  - desc: Endpoint for Web App, GraphQL, GraphQL WebSocket, ion images, mol images, and MolDB
    params:
      - server_name {{ sm_webapp_hostname }};
      - listen 80;
      - proxy_read_timeout 300;
      - send_timeout 300;
    locations:
      - path: /mol-images/
        params:
          - root /var/www;
      - path: /
        params:
          - proxy_pass http://web_server;
          - client_max_body_size 5M;
      - path: /db/iso_images/
        params:
          - proxy_pass http://isotope_image_server/db/iso_images/;
          - limit_except GET {deny all;}
      - path: /fs/iso_images/
        params:
          - proxy_pass http://isotope_image_server/fs/iso_images/;
          - limit_except GET {deny all;}
      - path: /fs/optical_images/
        params:
          - proxy_pass http://isotope_image_server/fs/optical_images/;
          - limit_except GET {deny all;}
      - path: /fs/raw_optical_images/
        params:
          - proxy_pass http://isotope_image_server/fs/raw_optical_images/;
          - client_max_body_size 25M;
      - path: /graphql
        params:
          - proxy_pass http://graphql_server/graphql;
          - include proxy-params.conf;
      - path: /graphiql
        params:
          - proxy_pass http://graphql_server/graphiql;
          - include proxy-params.conf;
      - path: /ws
        params:
          - proxy_pass http://graphql_ws_server/graphql;
          - proxy_http_version 1.1;
          - proxy_set_header Upgrade $http_upgrade;
          - proxy_set_header Connection "upgrade";
          - include proxy-params.conf;
      - path: /mol_db/
        params:
          - proxy_pass http://moldb_server/;
          - include proxy-params.conf;

  - desc: Elasticsearch redirect
    params:
      - listen {{ sm_es_port }};
    locations:
      - path: /
        params:
        - auth_basic "Private Property";
        - auth_basic_user_file /etc/nginx/passwdfile;
        - proxy_pass http://elasticsearch_server;
        - include proxy-params.conf;

basic_auth_users:
  - user: "{{ sm_es_user }}"
    password: "{{ sm_es_password }}"
  - user: "{{ kibana_user }}"
    password: "{{ kibana_password }}"
